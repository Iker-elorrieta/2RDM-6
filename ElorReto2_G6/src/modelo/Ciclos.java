package modelo;
// Generated 13 ene 2025, 13:01:47 by Hibernate Tools 6.5.1.Final

import java.util.HashSet;
import java.util.Set;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import hibernate.HibernateUtil;

/**
 * Ciclos generated by hbm2java
 */
public class Ciclos implements java.io.Serializable {

	private int id;
	private String nombre;
	private Set matriculacioneses = new HashSet(0);
	private Set moduloses = new HashSet(0);

	public Ciclos() {
	}

	public Ciclos(int id) {
		this.id = id;
	}
	
	public Ciclos(int id, String nombre) {
		this.id = id;
		this.nombre = nombre;
	}

	public Ciclos(int id, String nombre, Set matriculacioneses, Set moduloses) {
		this.id = id;
		this.nombre = nombre;
		this.matriculacioneses = matriculacioneses;
		this.moduloses = moduloses;
	}

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public Set getMatriculacioneses() {
		return this.matriculacioneses;
	}

	public void setMatriculacioneses(Set matriculacioneses) {
		this.matriculacioneses = matriculacioneses;
	}

	public Set getModuloses() {
		return this.moduloses;
	}

	public void setModuloses(Set moduloses) {
		this.moduloses = moduloses;
	}
	
	
	//Insercion de un ciclo nuevo en la base de datos SQL
	
	public void insertarCicloEnBD() {
	    Transaction tx = null; // Inicializar la transacción
	    SessionFactory sesion = HibernateUtil.getSessionFactory();
	    Session session = null;

	    try {
	        session = sesion.openSession(); // Abrir una nueva sesión por hilo
	        tx = session.beginTransaction(); // Iniciar la transacción

	        // Comprobar si el ciclo ya existe en la base de datos
	        int cicloId = 6;
	        String nombreCiclo = "ARI";

	        Ciclos cicloExistente = (Ciclos) session.createQuery("FROM Ciclos WHERE id = :cicloId")
	                .setParameter("cicloId", cicloId)
	                .uniqueResult();

	        if (cicloExistente == null) {
	            // Si no existe, se inserta un nuevo ciclo
	            System.out.println("Insertando Ciclo nuevo...\n");

	            Ciclos nuevoCiclo = new Ciclos(cicloId, nombreCiclo);
	            session.save(nuevoCiclo);

	            tx.commit(); // Confirmar la transacción
	            System.out.println("Ciclo ARI insertado con éxito");
	        } else {
	            System.out.println("El ciclo con ID " + cicloId + " ya ha sido insertado previamente.");
	        }

	    } catch (Exception e) {
	        if (tx != null) {
	            tx.rollback(); // Revertir la transacción en caso de error
	        }
	        e.printStackTrace(); // Imprimir el error para depuración
	    } finally {
	        if (session != null) {
	            session.close(); // Cerrar la sesión al final
	        }
	    }
	}

}
