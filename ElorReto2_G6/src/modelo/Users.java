package modelo;
// Generated 13 ene 2025, 13:01:47 by Hibernate Tools 6.5.1.Final

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import hibernate.HibernateUtil;

/**
 * Users generated by hbm2java
 */
public class Users implements java.io.Serializable {

	private int id;
	private Tipos tipos;
	private String email;
	private String username;
	private String password;
	private String nombre;
	private String apellidos;
	private String dni;
	private String direccion;
	private Integer telefono1;
	private Integer telefono2;
	private byte[] argazkia;
	private Set matriculacioneses = new HashSet(0);
	private Set reunionesesForProfesorId = new HashSet(0);
	private Set reunionesesForAlumnoId = new HashSet(0);
	private Set horarioses = new HashSet(0);

	public Users() {
	}

	public Users(String username, String password) {
		this.username = username;
		this.password = password;
		
	}
	public Users(int id, Tipos tipos) {
		this.id = id;
		this.tipos = tipos;
	}

	public Users(int id, Tipos tipos, String email, String username, String password, String nombre, String apellidos,
			String dni, String direccion, Integer telefono1, Integer telefono2, byte[] argazkia, Set matriculacioneses,
			Set reunionesesForProfesorId, Set reunionesesForAlumnoId, Set horarioses) {
		this.id = id;
		this.tipos = tipos;
		this.email = email;
		this.username = username;
		this.password = password;
		this.nombre = nombre;
		this.apellidos = apellidos;
		this.dni = dni;
		this.direccion = direccion;
		this.telefono1 = telefono1;
		this.telefono2 = telefono2;
		this.argazkia = argazkia;
		this.matriculacioneses = matriculacioneses;
		this.reunionesesForProfesorId = reunionesesForProfesorId;
		this.reunionesesForAlumnoId = reunionesesForAlumnoId;
		this.horarioses = horarioses;
	}

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public Tipos getTipos() {
		return this.tipos;
	}

	public void setTipos(Tipos tipos) {
		this.tipos = tipos;
	}

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getNombre() {
		return this.nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public String getApellidos() {
		return this.apellidos;
	}

	public void setApellidos(String apellidos) {
		this.apellidos = apellidos;
	}

	public String getDni() {
		return this.dni;
	}

	public void setDni(String dni) {
		this.dni = dni;
	}

	public String getDireccion() {
		return this.direccion;
	}

	public void setDireccion(String direccion) {
		this.direccion = direccion;
	}

	public Integer getTelefono1() {
		return this.telefono1;
	}

	public void setTelefono1(Integer telefono1) {
		this.telefono1 = telefono1;
	}

	public Integer getTelefono2() {
		return this.telefono2;
	}

	public void setTelefono2(Integer telefono2) {
		this.telefono2 = telefono2;
	}

	public byte[] getArgazkia() {
		return this.argazkia;
	}

	public void setArgazkia(byte[] argazkia) {
		this.argazkia = argazkia;
	}

	public Set getMatriculacioneses() {
		return this.matriculacioneses;
	}

	public void setMatriculacioneses(Set matriculacioneses) {
		this.matriculacioneses = matriculacioneses;
	}

	public Set getReunionesesForProfesorId() {
		return this.reunionesesForProfesorId;
	}

	public void setReunionesesForProfesorId(Set reunionesesForProfesorId) {
		this.reunionesesForProfesorId = reunionesesForProfesorId;
	}

	public Set getReunionesesForAlumnoId() {
		return this.reunionesesForAlumnoId;
	}

	public void setReunionesesForAlumnoId(Set reunionesesForAlumnoId) {
		this.reunionesesForAlumnoId = reunionesesForAlumnoId;
	}

	public Set getHorarioses() {
		return this.horarioses;
	}

	public void setHorarioses(Set horarioses) {
		this.horarioses = horarioses;
	}

	
	@Override
	public String toString() {
		return "Users [id=" + id + ", tipos=" + tipos + ", email=" + email + ", username=" + username + ", password="
				+ password + ", nombre=" + nombre + ", apellidos=" + apellidos + ", dni=" + dni + ", direccion="
				+ direccion + ", telefono1=" + telefono1 + ", telefono2=" + telefono2 + ", argazkia="
				+ Arrays.toString(argazkia) + ", matriculacioneses=" + matriculacioneses + ", reunionesesForProfesorId="
				+ reunionesesForProfesorId + ", reunionesesForAlumnoId=" + reunionesesForAlumnoId + ", horarioses="
				+ horarioses + "]";
	}

	//Consulta para verificar que el usuario introducido es de tipo profesor
	@SuppressWarnings("unchecked")
	public int insertarLogin(String usuarioCifrado, String contraCifrada) {
	    SessionFactory sesion = HibernateUtil.getSessionFactory();
	    Session session = sesion.openSession();
	    
	    try {
	        // Consulta para obtener todos los profesores
	        String hql = "FROM Users WHERE tipos.name = 'profesor'";
	        Query q = session.createQuery(hql);
	        List<Users> listaProfesores = q.list(); // Obtenemos todos los profesores

	        for (Users profesor : listaProfesores) {
	            // Ciframos el username y password almacenados en la BD
	            String usuarioHasheado = cifrarTexto(profesor.getUsername());
	            String contraHasheada = cifrarTexto(profesor.getPassword());
	            System.out.println("USUARIO: "+usuarioHasheado);
	            System.out.println("CONTRASEÃ‘A: "+contraHasheada);

	            // Comparamos con los valores cifrados recibidos desde el cliente
	            if (usuarioHasheado.equals(usuarioCifrado) && contraHasheada.equals(contraCifrada)) {
	                return profesor.getId(); // Si coinciden, devolvemos el ID del usuario
	            }
	        }
	        return 0; // Si no encuentra coincidencia, devuelve 0
	    } finally {
	        session.close();
	    }
	}

	private String cifrarTexto(String texto) {
	    try {
	        MessageDigest md = MessageDigest.getInstance("SHA");
	        md.update(texto.getBytes());
	        byte[] resumen = md.digest();
	        return new String(resumen); 
	    } catch (NoSuchAlgorithmException e) {
	        e.printStackTrace();
	        return null;
	    }
	}
	
	//Obtencion del horario del profesor mediante la id
	
	public String[][] getHorarioById(int idProfesor) {
		String[][] horarioProfesor= { { "08:00-09:00", "", "", "", "", "", "", "" }, { "09:00-10:00", "", "", "", "", "", "", "" },
				{ "10:00-11:00", "", "", "", "", "", "", "" }, { "11:00-12:00", "", "", "", "", "", "", "" },
				{ "12:00-13:00", "", "", "", "", "", "", "" } };

		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		String hql = "from Horarios where users = " + idProfesor + " ";
		Query q = session.createQuery(hql);
		List<?> filas = q.list();

		for (int i = 0; i < filas.size(); i++) {
			Horarios horario = (Horarios) filas.get(i);
			int dia = conseguirDia(horario.getId().getDia());
			int hora = Integer.parseInt(horario.getId().getHora());
			horarioProfesor[hora - 1][dia] = horario.getModulos().getNombre();
		}

		return horarioProfesor;
	}

	//Obtener los dias de la BD
	
	private int conseguirDia(String string) {
		
		int dia = 0;
		if (string.equals("L/A")) {
			dia = 1;
		} else if (string.equals("M/A")) {
			dia = 2;
		} else if (string.equals("X")) {
			dia = 3;
		} else if (string.equals("J/O")) {
			dia = 4;
		} else if (string.equals("V/O")) {
			dia = 5;
		} else if (string.equals("S/L")) {
			dia = 6;
		} else if (string.equals("D/I")) {
			dia = 7;
		}
		return dia;
	}
	
	//Consulta para el comboBox en Otros Horarios
	
	public String[] getProfesores(int idLogueado) {
		
	    String[] nombresProfesores = new String[0];
	 
	    SessionFactory sesion = HibernateUtil.getSessionFactory();
	    Session session = sesion.openSession();

	    try {
	        // Consulta HQL para obtener profesores excepto el usuario logueado	
	        String hql = "from Users where tipos.name = 'profesor' and id != :idLogueado";
	        Query query = session.createQuery(hql);
	        query.setParameter("idLogueado", idLogueado);
	        
	        List<Users> profesores = query.list();

	        // Convertir los nombres de los profesores a un array de Strings   
	        nombresProfesores = new String[profesores.size()];
	        
	        for (int i = 0; i < profesores.size(); i++) {
	            nombresProfesores[i] = profesores.get(i).getNombre();
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	    } finally {
	        session.close();
	    }

	    return nombresProfesores;
	}

	//Obtencion del Id del profesor seleccionado
	
	public int obtenerIdProfesor(String nombreProfesor) {
		
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		String hql = "from Users where username = '" + nombreProfesor + "' AND tipos.name = 'profesor' ";
		Query q = session.createQuery(hql);
		Users idProfesor = (Users) q.uniqueResult();
		if (idProfesor == null) {
			return 0;
		} else {
			return idProfesor.id;
		}
	}


	public String[][] getReuniones(int idProfesor) {
	    String[][] reunionProfesor = { 
	        { "", "", "", "", "", "", "", "" }, 
	        { "", "", "", "", "", "", "", "" },
	        { "", "", "", "", "", "", "", "" }, 
	        { "", "", "", "", "", "", "", "" },
	        { "", "", "", "", "", "", "", "" } 
	    };

	    SessionFactory sesion = HibernateUtil.getSessionFactory();
	    Session session = sesion.openSession();
	    String hql = "from Reuniones where usersByProfesorId = " + idProfesor + " ";
	    Query q = session.createQuery(hql);
	    List<?> filas = q.list();

	    for (int i = 0; i < filas.size(); i++) {
	        Reuniones reuniones = (Reuniones) filas.get(i);
	        int hora = conseguirHora(reuniones.getFecha().toLocalDateTime().getHour());
	        int dia = reuniones.getFecha().toLocalDateTime().getDayOfWeek().getValue();

	        // Concatenar tÃ­tulo y estado
	        reunionProfesor[hora][dia] = reuniones.getTitulo() + " - (" + reuniones.getEstado()+")";
	    }

	    return reunionProfesor;
	}

	
	private int conseguirHora(int hora) {
		// TODO Auto-generated method stub
		if (hora == 8) {
			hora = 0;
		} else if (hora == 9) {
			hora = 1;
		} else if (hora == 10) {
			hora = 2;
		} else if (hora == 11) {
			hora = 3;
		} else if (hora == 12) {
			hora = 4;
		}
		return hora;
	}

	//Metodo para obtener las reuniones que esten en pendiente o en conflicto
	
	public ArrayList<String[]> getReunionesPendientes(int idProfesor) {
		ArrayList<String[]> reunionProfesor = new ArrayList<String[]>();
		
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		String hql = "from Reuniones where usersByProfesorId = " + idProfesor +  " AND estado IN ('pendiente', 'conflicto')";
		Query q = session.createQuery(hql);
		List<?> filas = q.list();
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");  // Formato de fecha y hora
		
		for (int i = 0; i < filas.size(); i++) {
			
			Reuniones reuniones = (Reuniones) filas.get(i);
			String fechaFormateada = sdf.format(reuniones.getFecha());
		
			String[] reunion = {
					reuniones.getTitulo(),
					fechaFormateada,
					reuniones.getAula(),				
			};
			
			reunionProfesor.add(reunion);
		}
		
		return reunionProfesor;
	}
	
	//Metodo para obtener las reuniones que no esten en pendiente o en conflicto
	
	public ArrayList<String[]> getOtrasReuniones(int idProfesor) {
		ArrayList<String[]> otrasReuniones = new ArrayList<String[]>();
		
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		String hql = "from Reuniones where usersByProfesorId = " + idProfesor +  " AND estado NOT IN ('pendiente', 'conflicto')";
		Query q = session.createQuery(hql);
		List<?> filas = q.list();
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");  // Formato de fecha y hora
		
		for (int i = 0; i < filas.size(); i++) {
			
			Reuniones reuniones = (Reuniones) filas.get(i);
			String fechaFormateada = sdf.format(reuniones.getFecha());
		
			String[] reunion = {
					reuniones.getTitulo(),
					fechaFormateada,
					reuniones.getAula(),				
			};
			
			otrasReuniones.add(reunion);
		}
		
		return otrasReuniones;
	}

	//MÃ©todo para almacenar los ids de los centros de las reuniones pendientes o en conflicto
	
	public ArrayList<String> getIdsCentros(int idProfesor) {
		
		ArrayList<String> idsCentros = new ArrayList<String>();
		
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		String hql = "from Reuniones where usersByProfesorId = " + idProfesor +  " AND estado IN ('pendiente', 'conflicto')";
		Query q = session.createQuery(hql);
		List<?> filas = q.list();
		
		for (int i = 0; i < filas.size(); i++) {
			
			Reuniones reuniones = (Reuniones) filas.get(i);
			idsCentros.add(reuniones.getIdCentro());
		}
		
		return idsCentros;
	}
	
	//MÃ©todo para almacenar los ids de los centros de las reuniones que no estan en pendiente o en conflicto
	
	public ArrayList<String> getIdsOtrosCentros(int idProfesor) {
		
		ArrayList<String> idsOtrosCentros = new ArrayList<String>();
		
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		String hql = "from Reuniones where usersByProfesorId = " + idProfesor +  " AND estado NOT IN ('pendiente', 'conflicto')";
		Query q = session.createQuery(hql);
		List<?> filas = q.list();
		
		for (int i = 0; i < filas.size(); i++) {
			
			Reuniones reuniones = (Reuniones) filas.get(i);
			idsOtrosCentros.add(reuniones.getIdCentro());
		}
		
		return idsOtrosCentros;
	}


	public ArrayList<String> getEstados(int idProfesor) {
		
		ArrayList<String> estadoReuniones = new ArrayList<String>();
		
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		String hql = "from Reuniones where usersByProfesorId = " + idProfesor + " AND estado IN ('pendiente', 'conflicto')";
		Query q = session.createQuery(hql);
		List<?> filas = q.list();
		
		for (int i = 0; i < filas.size(); i++) {
			
			Reuniones reuniones = (Reuniones) filas.get(i);
			estadoReuniones.add(reuniones.getEstado());	
		
		}
		System.out.println("ESTADOS DE REUNIONES: "+estadoReuniones.toString());
		return estadoReuniones;
	}

	public ArrayList<String> getOtrosEstados(int idProfesor) {
		
		ArrayList<String> estadoOtrasReuniones = new ArrayList<String>();
		
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		String hql = "from Reuniones where usersByProfesorId = " + idProfesor + " AND estado NOT IN ('pendiente', 'conflicto')";
		Query q = session.createQuery(hql);
		List<?> filas = q.list();
		
		for (int i = 0; i < filas.size(); i++) {
			
			Reuniones reuniones = (Reuniones) filas.get(i);
			estadoOtrasReuniones.add(reuniones.getEstado());
		}
		System.out.println("ESTADOS DE OTRAS REUNIONES: "+estadoOtrasReuniones.toString());
		return estadoOtrasReuniones;
	}

	
	public boolean modificarEstadoReunion(int idProfesor, String titulo, String fecha, String nuevoEstado) {
	    boolean exito = false;

	    Transaction tx = null; // Inicializar la transacciÃ³n
	    SessionFactory sesion = HibernateUtil.getSessionFactory();
	    Session session = null;
	    
	    try {
	    	 // Convertir el String a Date con el formato adecuado
	        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm"); // Formato adecuado
	        Date fechaDate = sdf.parse(fecha);

	    	session = sesion.openSession(); // Abrir una nueva sesiÃ³n por hilo
		    tx = session.beginTransaction(); // Iniciar la transacciÃ³n

	        // Crear la consulta HQL para actualizar el estado
	        String hql = "UPDATE Reuniones SET estado = :nuevoEstado WHERE usersByProfesorId.id = :idProfesor AND titulo = :titulo AND fecha = :fecha";
	        Query query = session.createQuery(hql);
	        query.setParameter("nuevoEstado", nuevoEstado);
	        query.setParameter("idProfesor", idProfesor);
	        query.setParameter("titulo", titulo);
	        query.setParameter("fecha", fechaDate);

	        int result = query.executeUpdate();

	        // Si la actualizaciÃ³n fue exitosa, commit
	        if (result > 0) {
	            exito = true;
	        }

	     // Confirmar la transacciÃ³n
	        tx.commit();
	    } catch (Exception e) {
	        if (tx != null) {
	        	tx.rollback(); // En caso de error, hacer rollback
	        }
	        e.printStackTrace();
	    } finally {
	        session.close(); // Cerrar la sesiÃ³n
	    }

	    return exito;
	}

	

	
	

	

	
	
	
	
		
}
